#!/usr/bin/env node
// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "../../../node_modules/rescript/lib/es6/js_exn.js";
import * as Nodefs from "node:fs";
import * as Process from "process";
import * as CorePlus from "../../../node_modules/@re-graphql-codegen/core-plus/src/CorePlus.mjs";
import * as Nodepath from "node:path";
import * as RescriptEmbedLang from "../../../node_modules/rescript-embed-lang/src/RescriptEmbedLang.mjs";
import * as Caml_js_exceptions from "../../../node_modules/rescript/lib/es6/caml_js_exceptions.js";
import * as Codegen$GraphqlCodegenOperations from "./Codegen.mjs";

var usage = "Usage:\n  generate                                                | Generates all GraphQL code.\n    [--schema <path>]                                     | Filepath to your graphql schema.\n    [--output <path>]                                     | Where to emit all generated files.\n    [--src <path>]                                        | The source folder for where to look for ReScript files.\n    [--watch]                                             | Runs this command in watch mode.\n\n  unused-selections                                       | Check if we there are unused selections in your EdgeQL queries.\n    [--ci]                                                | Run in CI mode.\n\n  extract <filePath>                                      | Extract all %edgeql tags in file at <filePath>.";

async function isInConfigDir() {
  var cwd = Process.cwd();
  var bsconfig = Nodepath.resolve(cwd, "bsconfig.json");
  var rescriptJson = Nodepath.resolve(cwd, "rescript.json");
  try {
    await Nodefs.promises.access(bsconfig);
    return true;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      try {
        await Nodefs.promises.access(rescriptJson);
        return true;
      }
      catch (raw_exn$1){
        var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
        if (exn$1.RE_EXN_ID === Js_exn.$$Error) {
          return false;
        }
        throw exn$1;
      }
    } else {
      throw exn;
    }
  }
}

function example_run(extra, extra$1) {
  return Codegen$GraphqlCodegenOperations.run("", "", "", "", extra, extra$1);
}

var example = {
  run: example_run,
  schemaPath: ""
};

async function main() {
  new Map();
  var emitter = RescriptEmbedLang.make({
        TAG: "Generic",
        _0: "graphql"
      }, (async function (param) {
          var args = param.args;
          var schema = CorePlus.$$Option.getOrPanic(RescriptEmbedLang.CliArgs.getArgValue(args, ["--schema"]), "--schema argument required");
          var pluginName = CorePlus.$$Option.getOrPanic(RescriptEmbedLang.CliArgs.getArgValue(args, ["--plugin"]), "--plugin argument required");
          var scalarModule = CorePlus.$$Option.getOrPanic(RescriptEmbedLang.CliArgs.getArgValue(args, ["--scalar-module"]), "--scalar-module argument required");
          var baseTypesModule = CorePlus.$$Option.getOrPanic(RescriptEmbedLang.CliArgs.getArgValue(args, ["--base-types-module"]), "---base-types-module argument required");
          return {
                  run: (function (extra, extra$1) {
                      return Codegen$GraphqlCodegenOperations.run(schema, pluginName, scalarModule, baseTypesModule, extra, extra$1);
                    }),
                  schemaPath: schema
                };
        }), (async function (param) {
          var content = param.content;
          console.log("gen", content);
          var results = await param.config.run(content, param.path);
          console.log("results", results);
          var len = results.length;
          return {
                  TAG: "Ok",
                  _0: {
                    kind: "NoModuleName",
                    content: len !== 1 ? (
                        len !== 0 ? CorePlus.panic("Multiple results returned") : CorePlus.panic("No results returned")
                      ) : results[0].content
                  }
                };
        }), usage, undefined, (async function (param) {
          
        }));
  return RescriptEmbedLang.runCli(emitter, undefined);
}

main();

var Path;

export {
  Path ,
  usage ,
  isInConfigDir ,
  example ,
  main ,
}
/*  Not a pure module */
