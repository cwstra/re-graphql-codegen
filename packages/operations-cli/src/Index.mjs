#!/usr/bin/env node
// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("rescript/lib/js/js_exn.js");
var Nodefs = require("node:fs");
var Process = require("process");
var CorePlus = require("@re-graphql-codegen/core-plus/src/CorePlus.cjs");
var Nodepath = require("node:path");
var RescriptEmbedLang = require("rescript-embed-lang/src/RescriptEmbedLang.cjs");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");
var Codegen$GraphqlCodegenOperations = require("./Codegen.mjs");

var usage = "Usage:\n  generate                                                | Generates all EdgeDB code.\n    [--output <path>]                                     | Where to emit all generated files.\n    [--src <path>]                                        | The source folder for where to look for ReScript files.\n    [--watch]                                             | Runs this command in watch mode.\n\n  unused-selections                                       | Check if we there are unused selections in your EdgeQL queries.\n    [--ci]                                                | Run in CI mode.\n\n  extract <filePath>                                      | Extract all %edgeql tags in file at <filePath>.";

async function isInConfigDir() {
  var cwd = Process.cwd();
  var bsconfig = Nodepath.resolve(cwd, "bsconfig.json");
  var rescriptJson = Nodepath.resolve(cwd, "rescript.json");
  try {
    await Nodefs.promises.access(bsconfig);
    return true;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      try {
        await Nodefs.promises.access(rescriptJson);
        return true;
      }
      catch (raw_exn$1){
        var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
        if (exn$1.RE_EXN_ID === Js_exn.$$Error) {
          return false;
        }
        throw exn$1;
      }
    } else {
      throw exn;
    }
  }
}

async function main() {
  new Map();
  RescriptEmbedLang.make({
        TAG: "FirstClass",
        _0: "graphql"
      }, (async function (param) {
          var args = param.args;
          var schema = CorePlus.$$Option.getOrPanic(RescriptEmbedLang.CliArgs.getArgValue(args, [
                    "-S",
                    "--schema"
                  ]), "--schema argument required");
          var pluginName = CorePlus.$$Option.getOrPanic(RescriptEmbedLang.CliArgs.getArgValue(args, [
                    "-P",
                    "--plugin"
                  ]), "--plugin argument required");
          return {
                  run: (function (extra, extra$1) {
                      return Codegen$GraphqlCodegenOperations.run(schema, pluginName, extra, extra$1);
                    }),
                  schemaPath: schema
                };
        }), (async function (param) {
          return {
                  TAG: "Ok",
                  _0: {
                    kind: "WithModuleName",
                    moduleName: "Test",
                    content: param.content
                  }
                };
        }), usage, undefined, (async function (param) {
          
        }));
}

var Path;

exports.Path = Path;
exports.usage = usage;
exports.isInConfigDir = isInConfigDir;
exports.main = main;
/* node:fs Not a pure module */
