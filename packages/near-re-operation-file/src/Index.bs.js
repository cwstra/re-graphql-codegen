// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Graphql = require("graphql");
var Process = require("process");
var AST$Graphql = require("@re-graphql-codegen/graphql/src/AST.bs.js");
var Core__Array = require("@rescript/core/src/Core__Array.bs.js");
var Core__Option = require("@rescript/core/src/Core__Option.bs.js");
var Schema$Graphql = require("@re-graphql-codegen/graphql/src/Schema.bs.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var SchemaTypesSource = {};

var Unknown_type = /* @__PURE__ */Caml_exceptions.create("Index-GraphqlCodegenOperations.FragmentRegistry.Unknown_type");

function build(param, param$1, schemaObject) {
  return Core__Array.reduce(param$1.documents, {}, (function (registry, $$document) {
                var fragments = Core__Array.filterMap($$document.document.definitions, (function (d) {
                        if (d.kind !== "FragmentDefinition") {
                          return ;
                        }
                        var loc = d.loc;
                        if (loc === undefined) {
                          return ;
                        }
                        var name = d.name;
                        if (name === undefined) {
                          return ;
                        }
                        var variableDefinitions = d.variableDefinitions;
                        if (variableDefinitions === undefined) {
                          return ;
                        }
                        var directives = d.directives;
                        if (directives !== undefined) {
                          return {
                                  kind: "FragmentDefinition",
                                  loc: loc,
                                  name: name,
                                  variableDefinitions: variableDefinitions,
                                  typeCondition: d.typeCondition,
                                  directives: directives,
                                  selectionSet: d.selectionSet
                                };
                        }
                        
                      }));
                fragments.map(function (f) {
                      var typeName = AST$Graphql.NameNode.value(AST$Graphql.NamedTypeNode.name(f.typeCondition));
                      var match = Core__Option.map(Schema$Graphql.getType(schemaObject, typeName), Schema$Graphql.Named.parse);
                      if (match !== undefined) {
                        switch (match.TAG) {
                          case "Object" :
                              [Schema$Graphql.$$Object.name(match._0)];
                              break;
                          case "Interface" :
                              Schema$Graphql.getPossibleTypes(schemaObject, Schema$Graphql.Interface.toAbstract(match._0)).map(Schema$Graphql.$$Object.name);
                              break;
                          case "Union" :
                              Schema$Graphql.getPossibleTypes(schemaObject, Schema$Graphql.Union.toAbstract(match._0)).map(Schema$Graphql.$$Object.name);
                              break;
                          case "Scalar" :
                          case "Enum" :
                              break;
                          
                        }
                      } else {
                        throw {
                              RE_EXN_ID: Unknown_type,
                              _1: "Fragment " + Core__Option.mapOr(f.name, "<unknown>", AST$Graphql.NameNode.value) + " is set on non-existing type \"" + typeName + "\"",
                              Error: new Error()
                            };
                      }
                    });
                return registry;
              }));
}

var FragmentRegistry = {
  Unknown_type: Unknown_type,
  build: build
};

function buildFragmentResolver(collectorOptions, presetOptions, schemaObject, dedupeFragments) {
  build(collectorOptions, presetOptions, schemaObject);
}

function resolveDocumentImports(presetOptions, schemaObject, importResolverOptions, dedupeFragmentsOpt) {
  var dedupeFragments = dedupeFragmentsOpt !== undefined ? dedupeFragmentsOpt : false;
  buildFragmentResolver(importResolverOptions, presetOptions, schemaObject, dedupeFragments);
}

var $$default = {
  buildGeneratesSection: (async function (options) {
      Core__Option.getOr(options.schemaAst, Graphql.buildASTSchema(options.schema, options.config));
      Core__Option.getOr(options.presetConfig.cwd, Process.cwd());
      Core__Option.getOr(options.presetConfig.extension, ".generated.res");
      return [];
    })
};

exports.SchemaTypesSource = SchemaTypesSource;
exports.FragmentRegistry = FragmentRegistry;
exports.buildFragmentResolver = buildFragmentResolver;
exports.resolveDocumentImports = resolveDocumentImports;
exports.default = $$default;
exports.__esModule = true;
/* graphql Not a pure module */
