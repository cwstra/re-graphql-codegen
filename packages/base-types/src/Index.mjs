// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var CorePlus = require("@re-graphql-codegen/core-plus/src/CorePlus.mjs");
var Schema$Graphql = require("@re-graphql-codegen/graphql/src/Schema.mjs");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");
var Helpers$GraphqlCodegen = require("@re-graphql-codegen/graphql-codegen/src/Helpers.mjs");

async function plugin(schema, _documents, config) {
  try {
    console.log(config);
    console.log(_documents);
    var nullType = config.nullType;
    if (nullType !== undefined) {
      var listType = config.listType;
      if (listType !== undefined) {
        var baseTypesModule = config.baseTypesModule;
        var match = CorePlus.Either.partition(CorePlus.$$Array.filterMap(Object.values(Schema$Graphql.getTypeMap(schema)), (function (t) {
                    var e = Schema$Graphql.Named.parse(t);
                    switch (e.TAG) {
                      case "Enum" :
                          return {
                                  TAG: "Left",
                                  _0: e._0
                                };
                      case "InputObject" :
                          return {
                                  TAG: "Right",
                                  _0: e._0
                                };
                      default:
                        return ;
                    }
                  })));
        match[0].map(function ($$enum) {
                var values = Schema$Graphql.Enum.getValues($$enum);
                return ["module " + CorePlus.$$String.pascalCase(Schema$Graphql.Enum.name($$enum)) + " = {"].concat(["  type t = "], values.flatMap(function (v) {
                                  return [
                                          "    | @as(\"" + Schema$Graphql.EnumValue.value(v) + "\")",
                                          "    " + CorePlus.$$String.pascalCase(Schema$Graphql.EnumValue.name(v))
                                        ];
                                }), ["}"]).join("\n");
              }).join("\n\n");
        Helpers$GraphqlCodegen.sortInputObjectsTopologically(match[1]).map(function (io) {
              var fields = Schema$Graphql.InputObject.getFields(io);
              return ["module " + CorePlus.$$String.pascalCase(Schema$Graphql.InputObject.name(io)) + " = {"].concat(["  type t = {"], Object.entries(fields).flatMap(function (param) {
                                var match = Helpers$GraphqlCodegen.sanitizeFieldName(param[0], fields);
                                var alias = match[1];
                                var printInput = function (_i, _w) {
                                  while(true) {
                                    var w = _w;
                                    var i = _i;
                                    var s = Schema$Graphql.Input.parse(i);
                                    switch (s.TAG) {
                                      case "Scalar" :
                                          return w(nullType + "<" + baseTypesModule + "." + Schema$Graphql.Scalar.name(s._0) + ".t>");
                                      case "Enum" :
                                          return w(nullType + "<" + CorePlus.$$String.pascalCase(Schema$Graphql.Enum.name(s._0)) + ".t>");
                                      case "InputObject" :
                                          return w(nullType + "<" + CorePlus.$$String.pascalCase(Schema$Graphql.InputObject.name(s._0)) + ">");
                                      case "List" :
                                          _w = (function(w){
                                          return function (s) {
                                            return w(listType + "<" + nullType + "<" + s + ">>");
                                          }
                                          }(w));
                                          _i = Schema$Graphql.List.ofType(s._0);
                                          continue ;
                                      case "NonNull" :
                                          var s$1 = Schema$Graphql.Input.parse_nn(Schema$Graphql.NonNull.ofType(s._0));
                                          switch (s$1.TAG) {
                                            case "Scalar" :
                                                return w(baseTypesModule + "." + Schema$Graphql.Scalar.name(s$1._0) + ".t");
                                            case "Enum" :
                                                return w(CorePlus.$$String.pascalCase(Schema$Graphql.Enum.name(s$1._0)) + ".t");
                                            case "InputObject" :
                                                return w(CorePlus.$$String.pascalCase(Schema$Graphql.InputObject.name(s$1._0)));
                                            case "List" :
                                                _w = (function(w){
                                                return function (s) {
                                                  return w(listType + "<" + s + ">");
                                                }
                                                }(w));
                                                _i = Schema$Graphql.List.ofType(s$1._0);
                                                continue ;
                                            
                                          }
                                      
                                    }
                                  };
                                };
                                var value = printInput(Schema$Graphql.InputField.type_(param[1]), (function (s) {
                                        return s;
                                      }));
                                var mainLine = "    " + match[0] + ": " + value + ",";
                                if (alias !== undefined) {
                                  return [
                                          "    | @as(\"" + alias + "\")",
                                          mainLine
                                        ];
                                } else {
                                  return [mainLine];
                                }
                              }), [
                            "  }",
                            "}"
                          ]).join("\n");
            });
        return "";
      }
      throw {
            RE_EXN_ID: "Match_failure",
            _1: [
              "Index.res",
              19,
              4
            ],
            Error: new Error()
          };
    }
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Index.res",
            19,
            4
          ],
          Error: new Error()
        };
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    console.log(e);
    throw e;
  }
}

exports.plugin = plugin;
/* CorePlus Not a pure module */
